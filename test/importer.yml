- name: empty
  node: false
  input: ""
  expected: "\n"

- name: prepend
  node: true
  input: |
    fs.readFile();
  expected: |
    const fs = require("fs");

    fs.readFile();

- name: prepend-quote
  node: true
  input: |
    fs.readFile('example.txt');
  expected: |
    const fs = require('fs');

    fs.readFile('example.txt');

- name: prepend-no-semicolon
  node: true
  input: |
    fs.readFile()
  expected: |
    const fs = require("fs")

    fs.readFile()

- name: prepend-kind
  node: true
  input: |
    let filename = "example.txt";
    fs.readFile(filename);
  expected: |
    let fs = require("fs");

    let filename = "example.txt";
    fs.readFile(filename);

- name: prepend-all
  node: true
  input: |
    var path = '/tmp/example.txt'
    fs.readFile(path)

  expected: |
    var fs = require('fs')

    var path = '/tmp/example.txt'
    fs.readFile(path)

- name: append
  node: true
  input: |
    const fs = require("fs");

    fs.readFile();
    util.inspect({});
  expected: |
    const fs = require("fs");
    const util = require("util");

    fs.readFile();
    util.inspect({});

- name: append-quote
  node: true
  input: |
    const fs = require('fs');

    fs.readFile();
    util.inspect({});
  expected: |
    const fs = require('fs');
    const util = require('util');

    fs.readFile();
    util.inspect({});

- name: append-no-semicolon
  node: true
  input: |
    const fs = require("fs")

    fs.readFile()
    util.inspect({})
  expected: |
    const fs = require("fs")
    const util = require("util")

    fs.readFile()
    util.inspect({})

- name: append-kind
  node: true
  input: |
    let fs = require("fs");

    fs.readFile();
    util.inspect({});
  expected: |
    let fs = require("fs");
    let util = require("util");

    fs.readFile();
    util.inspect({});

- name: append-all
  node: true
  input: |
    var fs = require('fs')

    fs.readFile()
    util.inspect({})
  expected: |
    var fs = require('fs')
    var util = require('util')

    fs.readFile()
    util.inspect({})

- name: remove
  node: false
  input: |
    const fs = require("fs");
    console.log("Hello");
  expected: |
    console.log("Hello");

- name: remove-empty
  node: false
  input: |
    const fs = require("fs");
  expected: "\n"

- name: remove-only-requires
  node: false
  input: |
    const fs = require("fs");
    const x = 3;
  expected: |
    const x = 3;

- name: remove-multiple
  node: false
  input: |
    const fs = require("fs");
    const util = require("util");
    const http = require("http");

    util.inspect({});
  expected: |
    const util = require("util");

    util.inspect({});

- name: remove-and-append
  node: true
  input: |
    const fs = require("fs");
    const util = require("util");

    util.inspect({});
    http.createServer();
  expected: |
    const http = require("http");
    const util = require("util");

    util.inspect({});
    http.createServer();

- name: remove-namespaced
  node: false
  input: |
    const JsonFile = require("@exponent/json-file");
  expected: "\n"

- name: remove-default
  node: false
  input: |
    const es6 = require("../fixtures/es6.js").default;
  expected: "\n"

- name: keep
  node: false
  input: |
    console.log("This is a test");
  expected: |
    console.log("This is a test");

- name: keep-local-variable
  node: true
  input: |
    let fs = { readFile: () => {} };
    fs.readFile();
  expected: |
    let fs = { readFile: () => {} };
    fs.readFile();

- name: keep-existing-require
  node: true
  input: |
    const fs = require("fs");
    fs.readFile();
  expected: |
    const fs = require("fs");
    fs.readFile();

- name: keep-rewrite
  node: true
  input: |
    let fs = require("fs");
    fs = {};
  expected: |
    let fs = require("fs");
    fs = {};

- name: keep-multiple-declarators
  node: true
  input: |
    const fs = require("fs"), util = require("util");

    fs.readFile();
  expected: |
    const fs = require("fs"), util = require("util");

    fs.readFile();

- name: keep-same-line-code-before
  node: true
  input: |
    const x = 3; const fs = require("fs");
    /* some comment */ const util = require("util");
  expected: |
    const x = 3; const fs = require("fs");
    /* some comment */ const util = require("util");

- name: keep-same-line-code-after
  node: true
  input: |
    const fs = require("fs"); const x = 3;
    const util = require("util"); // some comment
  expected: |
    const fs = require("fs"); const x = 3;
    const util = require("util"); // some comment

- name: keep-undeclared-assign
  node: true
  input: |
    fs = {};
  expected: |
    fs = {};

- name: keep-namespaced
  node: false
  input: |
    const JsonFile = require("@exponent/json-file");
    new JsonFile();
  expected: |
    const JsonFile = require("@exponent/json-file");
    new JsonFile();

- name: keep-relative
  node: false
  input: |
    const DepRegistry = require("../lib/dep-registry.js");
    const runner = require("./runner.js");
    const stub = require("./dir/stub.js");

    new DepRegistry();
    runner.run();
    console.log(stub);
  expected: |
    const DepRegistry = require("../lib/dep-registry.js");
    const runner = require("./runner.js");
    const stub = require("./dir/stub.js");

    new DepRegistry();
    runner.run();
    console.log(stub);

- name: keep-default
  node: false
  input: |
    const stub = require("stub").default;
    console.log(stub);
  expected: |
    const stub = require("stub").default;
    console.log(stub);

- name: keep-react-for-jsx
  node: false
  input: |
    const React = require("react");
    <p>Paragraph</p>;
  expected: |
    const React = require("react");
    <p>Paragraph</p>;

- name: keep-jsx-ident
  node: false
  input: |
    const React = require("react");

    const Component = require("../fixtures/component.js");

    <Component />;
  expected: |
    const React = require("react");

    const Component = require("../fixtures/component.js");

    <Component />;

- name: keep-inner-scope
  node: true
  input: |
    const util = require("util");

    function foo() {
      const fs = require("fs");
      fs.readFile();
    }

    util.inspect();
  expected: |
    const util = require("util");

    function foo() {
      const fs = require("fs");
      fs.readFile();
    }

    util.inspect();

- name: keep-order
  node: false
  input: |
    const fs = require("fs");
    const JsonFile = require("@exponent/json-file");
    const util = require("util");

    const findImports = require("../visits/find-imports.js");
    const parser = require("../lib/parser.js");

    util.inspect({});
    fs.readFile();
    parser.run();
    findImports.retrieve();
    new JsonFile();
  expected: |
    const fs = require("fs");
    const JsonFile = require("@exponent/json-file");
    const util = require("util");

    const findImports = require("../visits/find-imports.js");
    const parser = require("../lib/parser.js");

    util.inspect({});
    fs.readFile();
    parser.run();
    findImports.retrieve();
    new JsonFile();

- name: keep-global-declaration
  node: false
  input: |
    let x
  expected: |
    let x

- name: keep-pkg-path
  node: false
  input: |
    const stub = require("babylon/some/nested/file");
    console.log(stub);
  expected: |
    const stub = require("babylon/some/nested/file");
    console.log(stub);

- name: keep-pkg-path-jsx
  node: false
  input: |
    const Stub = require("babylon/some/nested/file");
    const React = require("react");
    <Stub />;
  expected: |
    const Stub = require("babylon/some/nested/file");
    const React = require("react");
    <Stub />;

- name: keep-class-property
  node: true
  input: |
    class C {
      static fs = 3;
    }
  expected: |
    class C {
      static fs = 3;
    }

- name: keep-typeof-undef
  node: true
  input: |
    if (typeof fs === "undefined") {
      console.log("no fs");
    }
  expected: |
    if (typeof fs === "undefined") {
      console.log("no fs");
    }

- name: keep-object-rest-spread
  node: true
  input: |
    const { x, y, ...fs } = { x: 1, y: 2, z: 3 };
    fs.readFile();
  expected: |
    const { x, y, ...fs } = { x: 1, y: 2, z: 3 };
    fs.readFile();

- name: keep-dynamic-import
  node: true
  input: |
    const mod = "fs";
    import(mod).then(fs => { fs.readFile() });
  expected: |
    const mod = "fs";
    import(mod).then(fs => { fs.readFile() });

- name: multi-ident
  node: true
  input: |
    child_process.exec();
    childProcess.spawn();
  expected: |
    const childProcess = require("child_process");
    const child_process = require("child_process");

    child_process.exec();
    childProcess.spawn();

- name: default
  node: false
  input: |
    console.log(es6);
  expected: |
    const es6 = require("../fixtures/es6.js").default;

    console.log(es6);

- name: default-anonymous
  node: false
  input: |
    console.log(defaultAnonymous);
  expected: |
    const defaultAnonymous = require("../fixtures/default-anonymous.js").default;

    console.log(defaultAnonymous);

- name: react-for-jsx
  node: false
  input: |
    <p>Paragraph</p>;
  expected: |
    const React = require("react");

    <p>Paragraph</p>;

- name: jsx-ident
  node: false
  input: |
    <Component />;
  expected: |
    const React = require("react");

    const Component = require("../fixtures/component.js");

    <Component />;

- name: no-dupes
  node: true
  input: |
    fs.readFile();
    fs.createReadStream();
    fs.createWriteStream();
  expected: |
    const fs = require("fs");

    fs.readFile();
    fs.createReadStream();
    fs.createWriteStream();

- name: global-return
  node: false
  input: |
    readFile();
    return 3;
  expected: |
    const { readFile } = require("../lib/common.js");

    readFile();
    return 3;

- name: read-env
  node: true
  # crypto is a global in the browser; will work if *only* node env is set
  input: |
    crypto.randomBytes();
  expected: |
    const crypto = require("crypto");

    crypto.randomBytes();

- name: class-property
  node: true
  input: |
    class C {
      prop = () => {
        fs.readFile();
      };
    }
  expected: |
    const fs = require("fs");

    class C {
      prop = () => {
        fs.readFile();
      };
    }

- name: do-expressions
  node: true
  input: |
    const result = do {
      fs.readFile();
    };
  expected: |
    const fs = require("fs");

    const result = do {
      fs.readFile();
    };

- name: async-generators
  node: true
  input: |
    async function* foo() {
      await fs.readFile();
    }
  expected: |
    const fs = require("fs");

    async function* foo() {
      await fs.readFile();
    }

- name: function-bind
  node: true
  input: |
    fs::readFile();
  expected: |
    const fs = require("fs");

    const { readFile } = require("../lib/common.js");

    fs::readFile();

- name: decorators
  node: true
  input: |
    @fs
    class C {
      @util
      foo() {
        http.createServer();
      }
    }

    const foo = {
      @babylon
      bar() {}
    };
  expected: |
    const babylon = require("babylon");
    const fs = require("fs");
    const http = require("http");
    const util = require("util");

    @fs
    class C {
      @util
      foo() {
        http.createServer();
      }
    }

    const foo = {
      @babylon
      bar() {}
    };

- name: prop
  node: false
  input: |
    readFile();
  expected: |
    const { readFile } = require("../lib/common.js");

    readFile();

- name: prop-multiple
  node: false
  input: |
    readFile();
    readdir();
  expected: |
    const { readFile, readdir } = require("../lib/common.js");

    readFile();
    readdir();

- name: prop-wrap
  node: true
  input: |
    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();
  expected: |
    const {
      createReadStream,
      createWriteStream,
      readFileSync,
      readdirSync
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();

- name: prop-wrap-four-spaces
  node: true
  input: |
    readFileSync();
    readdirSync();
    createReadStream();

    if (true) {
        createWriteStream();
    }
  expected: |
    const {
        createReadStream,
        createWriteStream,
        readFileSync,
        readdirSync
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();

    if (true) {
        createWriteStream();
    }

- name: prop-wrap-hard-tab
  node: true
  input: |
    readFileSync();
    readdirSync();
    createReadStream();

    if (true) {
    	createWriteStream();
    }
  expected: |
    const {
    	createReadStream,
    	createWriteStream,
    	readFileSync,
    	readdirSync
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();

    if (true) {
    	createWriteStream();
    }

- name: prop-wrap-trailing-comma
  node: true
  input: |
    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();

    console.log({
      a: 3,
      b: 4,
    })
  expected: |
    const {
      createReadStream,
      createWriteStream,
      readFileSync,
      readdirSync,
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();

    console.log({
      a: 3,
      b: 4,
    })

- name: prop-existing
  node: false
  input: |
    const { readFile, readdir } = require("../lib/common.js");

    readFile();
    readdir();
  expected: |
    const { readFile, readdir } = require("../lib/common.js");

    readFile();
    readdir();

- name: prop-remove
  node: false
  input: |
    const { readFile } = require("fs");
    console.log("Hello");
  expected: |
    console.log("Hello");

- name: prop-remove-existing
  node: false
  input: |
    const { readFile, readdir } = require("fs");
    readFile();
  expected: |
    const { readFile } = require("fs");
    readFile();

- name: pkg
  node: false
  input: |
    babylon.parse();
  expected: |
    const babylon = require("babylon");

    babylon.parse();

- name: pkg-dev
  node: false
  input: |
    ava.test();
  expected: |
    const ava = require("ava");

    ava.test();

- name: pkg-capital
  node: false
  input: |
    new Babylon();
  expected: |
    const Babylon = require("babylon");

    new Babylon();

- name: pkg-camel
  node: false
  input: |
    jsYaml.load();
  expected: |
    const jsYaml = require("js-yaml");

    jsYaml.load();

- name: pkg-namespaced
  node: false
  input: |
    new JsonFile();
  expected: |
    const JsonFile = require("@exponent/json-file");

    new JsonFile();

- name: pkg-dock
  node: false
  input: |
    yaml.safeLoad();
  expected: |
    const yaml = require("js-yaml");

    yaml.safeLoad();

- name: order
  node: false
  input: |
    const util = require("util");
    const fs = require("fs");

    util.inspect({});
    fs.readFile();
    parser.run();
    findImports.retrieve();
    new JsonFile();
  expected: |
    const fs = require("fs");
    const JsonFile = require("@exponent/json-file");
    const util = require("util");

    const findImports = require("../visits/find-imports.js");
    const parser = require("../lib/parser.js");

    util.inspect({});
    fs.readFile();
    parser.run();
    findImports.retrieve();
    new JsonFile();

- name: relative
  node: false
  input: |
    new DepRegistry();
  expected: |
    const DepRegistry = require("../lib/dep-registry.js");

    new DepRegistry();

- name: relative-prop
  node: false
  input: |
    tryJSONParse();
  expected: |
    const { tryJSONParse } = require("../lib/common.js");

    tryJSONParse();

- name: relative-base
  node: false
  input: |
    parser.run()
  expected: |
    const parser = require("../lib/parser.js")

    parser.run()

- name: relative-base-recursive
  node: false
  input: |
    findExports.retrieve();
  expected: |
    const findExports = require("../visits/find-exports.js");

    findExports.retrieve();

- name: import-ident
  node: true
  input: |
    import * as fs from "fs";

    fs.readFile();
    util.inspect({});
  expected: |
    import * as fs from "fs";
    import * as util from "util";

    fs.readFile();
    util.inspect({});

- name: import-default
  node: false
  input: |
    import * as fs from "fs";

    fs.readFile();
    console.log(es6);
  expected: |
    import * as fs from "fs";

    import es6 from "../fixtures/es6.js";

    fs.readFile();
    console.log(es6);

- name: import-prop
  node: true
  input: |
    import * as fs from "fs";

    fs.readFile();
    inspect({});
  expected: |
    import * as fs from "fs";
    import { inspect } from "util";

    fs.readFile();
    inspect({});

- name: import-ident-prop
  node: true
  input: |
    import * as fs from "fs";

    fs.readFile();
    util.inspect();
    inherits();
  expected: |
    import * as fs from "fs";
    import { inherits } from "util";
    import * as util from "util";

    fs.readFile();
    util.inspect();
    inherits();

- name: import-default-prop
  node: false
  input: |
    import * as fs from "fs";

    fs.readFile();
    console.log(es6);
    prop();
  expected: |
    import * as fs from "fs";

    import es6, { prop } from "../fixtures/es6.js";

    fs.readFile();
    console.log(es6);
    prop();

- name: import-remove
  node: false
  input: |
    import * as fs from "fs";
    import { inspect, inherits } from "util";
    import es6 from "../fixtures/es6.js";

    inspect({});
  expected: |
    import { inspect } from "util";

    inspect({});

- name: import-multi-ident
  node: true
  input: |
    import * as fs from "fs";

    fs.readFile();
    child_process.exec();
    childProcess.spawn();
  expected: |
    import * as childProcess from "child_process";
    import * as child_process from "child_process";
    import * as fs from "fs";

    fs.readFile();
    child_process.exec();
    childProcess.spawn();

- name: import-namespaced
  node: false
  input: |
    import * as fs from "fs";

    fs.readFile();
    new JsonFile();
  expected: |
    import * as fs from "fs";
    import * as JsonFile from "@exponent/json-file";

    fs.readFile();
    new JsonFile();

- name: ignore-flow
  node: false
  input: |
    let x
    (x:JsonFile)
  expected: |
    let x
    (x:JsonFile)

- name: ignore-import-type
  node: false
  input: |
    import { a, type b } from 'foo';
    import type { c, d } from 'bar';
    import { typeof e } from 'baz';
    import type * as f from 'foo-bar';
  expected: |
    import { a, type b } from 'foo';
    import type { c, d } from 'bar';
    import { typeof e } from 'baz';
    import type * as f from 'foo-bar';

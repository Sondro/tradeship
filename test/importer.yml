- name: noop
  input: |
    console.log("This is a test");
  expected: |
    console.log("This is a test");

- name: noop-local-variable
  input: |
    let fs = { readFile: () => {} };
    fs.readFile();
  expected: |
    let fs = { readFile: () => {} };
    fs.readFile();

- name: noop-existing-require
  input: |
    const fs = require("fs");
    fs.readFile();
  expected: |
    const fs = require("fs");
    fs.readFile();

- name: prepend
  input: |
    fs.readFile();
  expected: |
    const fs = require("fs");

    fs.readFile();

- name: prepend-quote
  input: |
    fs.readFile('example.txt');
  expected: |
    const fs = require('fs');

    fs.readFile('example.txt');

- name: prepend-no-semicolon
  input: |
    fs.readFile()
  expected: |
    const fs = require("fs")

    fs.readFile()

# TODO: eslintrc tests for crypto

- name: prepend-kind
  input: |
    let filename = "example.txt";
    fs.readFile(filename);
  expected: |
    let fs = require("fs");

    let filename = "example.txt";
    fs.readFile(filename);

- name: prepend-all
  input: |
    var path = '/tmp/example.txt'
    fs.readFile(path)

  expected: |
    var fs = require('fs')

    var path = '/tmp/example.txt'
    fs.readFile(path)

- name: append
  input: |
    const fs = require("fs");

    fs.readFile();
    util.inspect({});
  expected: |
    const fs = require("fs");
    const util = require("util");

    fs.readFile();
    util.inspect({});

- name: append-quote
  input: |
    const fs = require('fs');

    fs.readFile();
    util.inspect({});
  expected: |
    const fs = require('fs');
    const util = require('util');

    fs.readFile();
    util.inspect({});

- name: append-no-semicolon
  input: |
    const fs = require("fs")

    fs.readFile()
    util.inspect({})
  expected: |
    const fs = require("fs")
    const util = require("util")

    fs.readFile()
    util.inspect({})

- name: append-kind
  input: |
    let fs = require("fs");

    fs.readFile();
    util.inspect({});
  expected: |
    let fs = require("fs");
    let util = require("util");

    fs.readFile();
    util.inspect({});

- name: append-all
  input: |
    var fs = require('fs')

    fs.readFile()
    util.inspect({})
  expected: |
    var fs = require('fs')
    var util = require('util')

    fs.readFile()
    util.inspect({})

- name: remove
  input: |
    const fs = require("fs");
    console.log("Hello");
  expected: |
    console.log("Hello");

- name: remove-empty
  input: |
    const fs = require("fs");
  expected: "\n"

- name: remove-only-requires
  input: |
    const fs = require("fs");
    const x = 3;
  expected: |
    const x = 3;

- name: remove-multiple
  input: |
    const fs = require("fs");
    const util = require("util");
    const http = require("http");

    util.inspect({});
  expected: |
    const util = require("util");

    util.inspect({});

- name: remove-and-append
  input: |
    const fs = require("fs");
    const util = require("util");

    util.inspect({});
    http.createServer();
  expected: |
    const http = require("http");
    const util = require("util");

    util.inspect({});
    http.createServer();

- name: keep-multiple-declarators
  input: |
    const fs = require("fs"), util = require("util");

    fs.readFile();
  expected: |
    const fs = require("fs"), util = require("util");

    fs.readFile();

- name: keep-same-line-code-before
  input: |
    const x = 3; const fs = require("fs");
    /* some comment */ const util = require("util");
  expected: |
    const x = 3; const fs = require("fs");
    /* some comment */ const util = require("util");

- name: keep-same-line-code-after
  input: |
    const fs = require("fs"); const x = 3;
    const util = require("util"); // some comment
  expected: |
    const fs = require("fs"); const x = 3;
    const util = require("util"); // some comment

- name: prop
  input: |
    readFile();
  expected: |
    const { readFile } = require("fs");

    readFile();

- name: prop-multiple
  input: |
    readFile();
    readdir();
  expected: |
    const { readFile, readdir } = require("fs");

    readFile();
    readdir();

- name: prop-wrap
  input: |
    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();
  expected: |
    const {
      readFileSync,
      readdirSync,
      createReadStream,
      createWriteStream
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();

- name: prop-wrap-four-spaces
  input: |
    readFileSync();
    readdirSync();
    createReadStream();
    
    if (true) {
        createWriteStream();
    }
  expected: |
    const {
        readFileSync,
        readdirSync,
        createReadStream,
        createWriteStream
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();
    
    if (true) {
        createWriteStream();
    }

- name: prop-wrap-hard-tab
  input: |
    readFileSync();
    readdirSync();
    createReadStream();
    
    if (true) {
    	createWriteStream();
    }
  expected: |
    const {
    	readFileSync,
    	readdirSync,
    	createReadStream,
    	createWriteStream
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();
    
    if (true) {
    	createWriteStream();
    }

- name: prop-wrap-trailing-comma
  input: |
    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();

    console.log({
      a: 3,
      b: 4,
    })
  expected: |
    const {
      readFileSync,
      readdirSync,
      createReadStream,
      createWriteStream,
    } = require("fs");

    readFileSync();
    readdirSync();
    createReadStream();
    createWriteStream();

    console.log({
      a: 3,
      b: 4,
    })

- name: prop-existing
  input: |
    const { readFile, readdir } = require("fs");

    readFile();
    readdir();
  expected: |
    const { readFile, readdir } = require("fs");

    readFile();
    readdir();

- name: prop-remove
  input: |
    const { readFile } = require("fs");
    console.log("Hello");
  expected: |
    console.log("Hello");

- name: prop-remove-existing
  input: |
    const { readFile, readdir } = require("fs");
    readFile();
  expected: |
    const { readFile } = require("fs");
    readFile();

- name: dependency
  input: |
    eslint.lint();
  expected: |
    const eslint = require("eslint");

    eslint.lint();

- name: dependency-dev
  input: |
    ava.test();
  expected: |
    const ava = require("ava");

    ava.test();

- name: dependency-capital
  input: |
    new Eslint();
  expected: |
    const Eslint = require("eslint");

    new Eslint();

- name: dependency-camel
  input: |
    jsYaml.load();
  expected: |
    const jsYaml = require("js-yaml");

    jsYaml.load();

- name: order
  input: |
    const util = require("util");
    const fs = require("fs");

    util.inspect({});
    http.createServer();
    fs.readFile();
  expected: |
    const fs = require("fs");
    const http = require("http");
    const util = require("util");

    util.inspect({});
    http.createServer();
    fs.readFile();

- name: relative
  input: |
    new DepRegistry();
  expected: |
    const DepRegistry = require("../dep-registry.js");

    new DepRegistry();

- name: relative-prop
  input: |
    lint();
  expected: |
    const { lint } = require("../common.js");

    lint();

- name: relative-base
  input: |
    parser.run()
  expected: |
    const parser = require("../parser.js")

    parser.run()

- name: relative-base-recursive
  input: |
    findExports.retrieve()
  expected: |
    const findExports = require("../rules/find-exports.js")

    findExports.retrieve()
